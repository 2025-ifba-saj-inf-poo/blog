import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as e,o}from"./app-Du27UWmO.js";const n={};function t(l,s){return o(),a("div",null,s[0]||(s[0]=[e(`<h3 id="exercicio-de-refatoracao-otimizando-o-jogo-hole-io-com-orientacao-a-objetos" tabindex="-1"><a class="header-anchor" href="#exercicio-de-refatoracao-otimizando-o-jogo-hole-io-com-orientacao-a-objetos"><span>Exercício de Refatoração: Otimizando o Jogo &quot;<a href="http://Hole.io" target="_blank" rel="noopener noreferrer">Hole.io</a>&quot; com Orientação a Objetos</span></a></h3><p><strong>Objetivo:</strong></p><p>Após construir a primeira versão funcional do nosso jogo, o próximo passo crucial no desenvolvimento de software é a <strong>refatoração</strong>. Vamos aprimorar nosso código para aplicar os conceitos de <strong>Herança</strong>, <strong>Encapsulamento</strong> e <strong>Construtores</strong> de forma mais robusta e elegante.</p><p>O objetivo é fazer com que a classe <code>Swallowable</code> se torne mais inteligente e responsável, simplificando as classes filhas (<code>Rock</code>, <code>Tree</code>) e tornando nosso código mais fácil de manter e expandir.</p><p><strong>Instruções:</strong></p><p>Siga os passos abaixo para refatorar o código do seu projeto.</p><p><strong>1. Refatorando a Superclasse <code>Swallowable</code></strong></p><p>Esta classe se tornará o cérebro por trás de todos os objetos que podem ser engolidos.</p><ul><li><p><strong>Encapsulamento:</strong> O atributo <code>objectSize</code> não deve ser acessível diretamente pelas classes filhas. Transforme-o em <code>private</code> e crie um método &quot;getter&quot; público para acessá-lo.</p></li><li><p><strong>Construtor com Parâmetros:</strong> Modifique o construtor da <code>Swallowable</code> para que ele receba o tamanho e a imagem como parâmetros. Isso permitirá que cada subclasse informe seu tamanho e qual imagem deve ser exibida no momento da criação.</p></li><li><p><strong>Responsabilidade de Dimensionamento:</strong> Um objeto deve poder chamar &quot;desenhar&quot; de si mesmo. A <code>Swallowable</code> deve ser responsável por aplicar o <code>objectSize</code> ao tamanho visual de sua imagem. Então, vamos criar um método <code>scaleImage</code> com uma definição de visibilidade que a subclasse possa chamar.</p></li></ul><div class="hint-container warning"><p class="hint-container-title">?</p><p>Faz sentido existir alguma instancia de <code>Swallowable</code> sem ser uma especialização (como <code>Rock</code> ou <code>Tree</code>)?</p></div><p><strong>2. Simplificando as Subclasses (<code>Rock</code> e <code>Tree</code>)</strong></p><p>Com a superclasse mais inteligente, as subclasses se tornam muito mais simples.</p><ul><li><strong>Chamada ao <code>super()</code>:</strong> O construtor de <code>Rock</code> e <code>Tree</code> deve, como primeira ação, chamar o construtor da superclasse, passando seu tamanho específico e definição da imagem</li></ul><p><strong>3. Ajustando a Classe <code>Hole</code></strong></p><p>Finalmente, ajuste o método <code>eat()</code> da classe <code>Hole</code> para acessar o tamanho dos objetos engolíveis através do método getter que você criou na <code>Swallowable</code>. Isso garante que a <code>Hole</code> não dependa diretamente dos detalhes internos das subclasses.</p><p>O <code>Hole</code> deve crescer ao engolir qualquer objeto da classe <code>Swallowable</code>, desde que seu tamanho seja maior que o do objeto.</p><p>Ao engolir um objeto, o <code>Hole</code> deve crescer 10% do tamanho do objeto engolido. Por exemplo, se o <code>Hole</code> engolir uma <code>Tree</code> de tamanho 30, ele deve crescer 3 unidades.</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">size </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> item</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getObjectSize</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> *</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0.1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // Cresce 10% do tamanho do objeto engolido</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>4. Ajuste a movimentação da <code>Hole</code></strong></p><p>Para melhorar a experiência do jogador, ajuste a movimentação da <code>Hole</code> para que seja pelo teclado. Utilize as teclas de seta para mover a <code>Hole</code> para cima, baixo, esquerda e direita. Isso tornará o controle do jogo mais intuitivo.</p><p>O <code>Hole</code> deve ficar no centro da tela quando o jogo começar e permanecer assim durante todo o jogo. Ao mover a <code>Hole</code>, o cenário (mundo) deve se mover em torno dele, criando a ilusão de que a <code>Hole</code> está se movendo pelo ambiente.</p><p>Para isso, você pode implementar a movimentação do cenário em resposta às teclas de seta pressionadas, ajustando a posição dos objetos no mundo em vez da <code>Hole</code> em si.</p><p>Então o código do método <code>followMouse()</code> da classe <code>Hole</code> não faz mais sentido.</p><p>Os objetos que podem ser engolidos pelo <code>Hole</code> devem adicionar a movimentação pelo cenário em seu método <code>act()</code>, verificando as teclas de seta pressionadas e ajustando a posição dos objetos em conformidade. Em qual classe esse código deve ficar?</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//...</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Greenfoot</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">isKeyDown</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;up&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // Move o objeto para baixo</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Greenfoot</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">isKeyDown</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;down&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // Move o objeto para cima</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Greenfoot</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">isKeyDown</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;left&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // Move o objeto para a direita</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Greenfoot</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">isKeyDown</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;right&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // Move o objeto para a esquerda</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }   </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Para que o objetos possam sair da tela (<code>World</code>), você pode passar um novo parâmetro no construtor da classe <code>MyWorld</code> (<code>bounded</code>) como <code>false</code>. Assim, o mundo não limitará os objetos dentro da tela.</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> greenfoot.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MyWorld</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> World</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> MyWorld</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        super</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">800</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">800</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>5. Exibindo pontuação</strong></p><p>A pontuação (tamanho do <code>Hole</code>) deve ser exibida no canto superior esquerdo da tela.</p><p>Utilize o método <code>showText</code> da classe <code>World</code> para exibir a pontuação. Atualize a pontuação sempre que o <code>Hole</code> crescer.</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// No método act() da classe Hole</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Exibe a pontuação no canto superior esquerdo</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getWorld</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">showText</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Pontos: &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> size, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">50</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">25</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Resultado Final</strong></p><p>Ao final, seu código estará mais organizado, cada classe terá responsabilidades mais claras e adicionar novos objetos engolíveis (como um <code>Carro</code> ou uma <code>Casa</code>) será uma tarefa muito mais simples. Esta estrutura é um excelente exemplo do poder da herança e do encapsulamento na Orientação a Objetos.</p>`,33)]))}const p=i(n,[["render",t]]),h=JSON.parse('{"path":"/posts/14_jogo_etapa2.html","title":"","lang":"pt-BR","frontmatter":{"icon":"edit","date":"2025-09-15T10:30:00.000Z","tag":["greenfoot","jogo"],"category":["trabalho"],"order":15},"git":{"createdTime":1757903894000,"updatedTime":1757903894000,"contributors":[{"name":"Leandro Souza","username":"","email":"leandro.costa@ifba.edu.br","commits":1}]},"readingTime":{"minutes":2.57,"words":772},"filePathRelative":"posts/14_jogo_etapa2.md"}');export{p as comp,h as data};
